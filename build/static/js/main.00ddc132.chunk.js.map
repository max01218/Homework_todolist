{"version":3,"sources":["ToDoAddForm.js","ToDoTitle.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoAddForm","props","state","newText","todo","text","editing","this","remove","id","checkToggle","setState","e","target","value","saveEditedValue","className","completed","onClick","checkTodoToggle","onDoubleClick","showEditForm","type","placeholder","onChange","getNewText","deleteTodo","React","Component","ToDoTitle","App","todos","color","newId","preventDefault","newTodos","filter","item","map","getNewValue","addTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00ddc132.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ToDoAddForm extends React.Component {\r\n    constructor (props) {\r\n        super (props);\r\n\r\n        this.state = {\r\n            newText: props.todo.text,\r\n            editing: false,\r\n        }\r\n    }\r\n    \r\n    // 刪除\r\n    deleteTodo () {\r\n        this.props.remove(this.props.todo.id);\r\n    }\r\n\r\n    // 完成\r\n    checkTodoToggle () {\r\n        this.props.checkToggle(this.props.todo.id);\r\n    }\r\n\r\n    // 顯示編輯表單\r\n    showEditForm() {\r\n        const {editing} = this.state;\r\n\r\n        this.setState({\r\n            newText: this.props.todo.text,\r\n            editing: !editing,\r\n        });\r\n    }\r\n\r\n    // 取表單輸入內容\r\n    getNewText(e) {\r\n        const newText = e.target.value;\r\n\r\n        this.setState({\r\n            newText: newText,\r\n        });\r\n        \r\n    }\r\n    \r\n    // 儲存編輯資料\r\n    saveEditedValue() {\r\n        const {newText} = this.state;\r\n\r\n        this.props.saveEditedValue(this.props.todo.id, newText);\r\n        this.setState({\r\n            newText: this.props.todo.text,\r\n            editing: false,\r\n        });\r\n    }\r\n    \r\n\r\n    render () {\r\n        const {editing} = this.state;\r\n        const {todo} = this.props;\r\n        \r\n        //console.log(this.state)\r\n\r\n        return (\r\n            <li className={ \"list-group-item list-row \" + (todo.completed ? \"done\" : \"\") }>\r\n                <div className=\"btn-circle checkbox\" onClick={() => this.checkTodoToggle()} >✓</div>\r\n                <div className=\"list-text__container\" onDoubleClick={() => this.showEditForm()}>\r\n                    { \r\n                        !editing && <span className=\"list-text\">{ todo.text }</span> \r\n                    }\r\n                    {\r\n                        editing && \r\n                        <div className={\"input-group\"}>\r\n                            <input type=\"text\" className=\"form-control\" placeholder={todo.text} value={this.state.newText} onChange={(e) => this.getNewText(e)}/>\r\n                            <div className=\"input-group-append\">\r\n                                <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => this.showEditForm()}>取消</button>\r\n                                <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => this.saveEditedValue()}>完成編輯</button>\r\n                            </div>       \r\n                        </div>\r\n                    }\r\n                    \r\n                </div>\r\n                <div className=\"btn-circle delete\" onClick={() => this.deleteTodo()} >✕</div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\nexport default ToDoAddForm;","import React from 'react';\r\nclass ToDoTitle extends React.Component {\r\n    render () {\r\n    return <h1>CGU Todo list</h1>;\r\n    }\r\n   }\r\n   export default ToDoTitle;","import './App.css';\nimport React from 'react';\n// import out from './toDoList';\nimport ToDoAddForm from './ToDoAddForm';\nimport ToDoTitle from './ToDoTitle';\nclass App extends React.Component {\n  constructor (props) {\n      super (props);\n      this.state = {\n          todos: [\n              {id: 1, text: '1', color:'red', completed: true},\n              {id: 2, text: '2', completed: false},\n              {id: 3, text: '3', completed: false},\n          ],\n          newId: 4,\n          newText: '',\n      }\n  }\n  \n  // 取 todo 的內容\n  getNewValue (e) {\n      const newText = e.target.value;\n      this.setState({\n          newText: newText,\n      });\n  }\n  \n\n  // 新增\n  addTodo (e) {\n      const {todos, newText, newId} = this.state;\n      \n      if (!newText) {\n          e.preventDefault();\n          return;\n      }\n      \n      this.setState({\n          todos: [\n              ...todos,\n              {id: newId, text: newText, completed: false}\n          ],\n          newId: newId +1,\n          newText: '',\n      });\n  }\n\n  // 刪除\n  deleteTodo (id) {\n      const {todos} = this.state;\n      \n      let newTodos = todos.filter((item) => item.id !== id);\n      \n      this.setState({\n          todos: newTodos,\n      });        \n  }\n\n  // 完成\n  checkTodoToggle (id) {\n      const {todos} = this.state;\n\n      let newTodos = todos.map((item) => {\n          if(item.id === id){\n              item.completed = !item.completed;\n          }\n          return item;\n      });\n      \n      this.setState({\n          todos: newTodos,\n      })\n  }\n\n\n  // 編輯\n  saveEditedValue(id, value) {\n      const {todos} = this.state;\n\n      let newTodos = todos.map((item) => {\n          if(item.id === id){\n              item.text = value;\n          }\n          return item;\n      });\n      \n      this.setState({\n          todos: newTodos,\n      })\n  }\n  \n\n\n  render () {\n      let {todos} = this.state;\n      \n      //console.log(todos)\n\n      return (\n          <div className=\"container\">\n              <header className=\"header__container\">\n                <ToDoTitle></ToDoTitle>\n              </header>\n              <div className=\"input-group mb-3\">\n                  <input type=\"text\" className=\"form-control\" id=\"input-add\" placeholder=\"add a new todo\"\n                      value={this.state.newText}\n                      onChange={(e) => this.getNewValue(e)} />\n                  <span className=\"input-group-append\">\n                      <button\n                          className=\"btn btn-outline-secondary\"\n                          onClick={(e) => this.addTodo(e)}\n                      >Add</button>\n                  </span>\n              </div>\n              <ul className=\"list-group list-group-flush\">\n                  {todos.map((todo) =>\n                      <ToDoAddForm\n                          key={todo.id}\n                          todo={todo}\n                          remove={(id) => this.deleteTodo(id)}\n                          checkToggle={(id) => this.checkTodoToggle(id)}\n                          saveEditedValue={(id, value) => this.saveEditedValue(id, value)}\n                      />\n                  )}\n              </ul>\n          </div>\n      );\n  }\n}\n// function App() {\n//   return (\n//     <div>{git()}</div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}